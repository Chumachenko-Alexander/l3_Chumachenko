//
//  main.swift
//  l3_Chumachenko
//
//  Created by –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ß—É–º–∞—á–µ–Ω–∫–æ on 11.03.2021.
//

import Foundation

///–°–æ–∑–¥–∞–π –ª–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å üèé
struct Car {
    private let make: String
    private let model: String
    private let color: Color
    private var turbocharger: Bool
    private var power: UInt
    private var stockPower: UInt
    private var odometer: Double
    private let fuelType: FuelType
    private var transmission: Transmission {
        willSet{
            switch transmission {
            case .manual:
                print("–ù–æ–≤—ã–π —Ç–∏–ø –∫–ø–ø - \(newValue.rawValue)")
            case .automatic:
                print("–ù–æ–≤—ã–π —Ç–∏–ø –∫–ø–ø - \(newValue.rawValue)")
            case .robot:
                print("–ù–æ–≤—ã–π —Ç–∏–ø –∫–ø–ø - \(newValue.rawValue)")
            case .variator:
                print("–ù–æ–≤—ã–π —Ç–∏–ø –∫–ø–ø - \(newValue.rawValue)")
            }
        }
        didSet{
            switch transmission {
            case .manual:
                print("–°—Ç–∞—Ä—ã–π —Ç–∏–ø –∫–ø–ø - \(oldValue.rawValue)")
            case .automatic:
                print("–°—Ç–∞—Ä—ã–π —Ç–∏–ø –∫–ø–ø - \(oldValue.rawValue)")
            case .robot:
                print("–°—Ç–∞—Ä—ã–π —Ç–∏–ø –∫–ø–ø - \(oldValue.rawValue)")
            case .variator:
                print("–°—Ç–∞—Ä—ã–π —Ç–∏–ø –∫–ø–ø - \(oldValue.rawValue)")
            }
        }
    }
    private var engineStatus: EngineStatus {
        willSet{
            if newValue == .on {
                print("–í—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –¥–≤–∏–≥–∞—Ç–µ–ª—å")
            } else {
                print("–í—ã –≤—ã–∫–ª—é—á–∞–µ—Ç–µ –¥–≤–∏–≥–∞—Ç–µ–ª—å")
            }
        }
        didSet{
            if oldValue == .off {
                print("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å")
            } else {
                print("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥–ª—É—à–∏–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å")
            }
        }
    }
    
    //    –∏–Ω–∏—Ç—ã
    init(make: String, model: String, color: Color, power: UInt, turbocharger: Bool, odometer: Double, fuelType: FuelType, transmission: Transmission) {
        self.make = make
        self.model = model
        self.color = color
        self.power = power
        self.turbocharger = turbocharger
        self.odometer = odometer
        self.fuelType = fuelType
        self.transmission = transmission
        engineStatus = .off
        stockPower = power
    }
    
    //    –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
    enum CarInfoMod {
        case fullInfo
        case onlyTechInfo
        case onlyNoTechInfo
        case onlyEngineStatus
    }
    enum FuelType: String {
        case diesel = "–î–∏–∑–µ–ª—å", gas = "–ë–µ–Ω–∑–∏–Ω", electric = "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"
    }
    
    enum Transmission: String {
        case manual = "–ú–µ—Ö–∞–Ω–∏–∫–∞"
        case automatic = "–ê–≤—Ç–æ–º–∞—Ç"
        case robot = "–†–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"
        case variator = "–í–∞—Ä–∏–∞—Ç–æ—Ä"
    }
    
    enum EngineStatus: String {
        case on = "–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω", off = "–î–≤–∏–≥–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    }
    
    enum Color: String {
        case black = "black"
        case darkGray = "dark Gray"
        case lightGray = "light Gray"
        case white = "white"
        case gray = "gray"
        case red = "red"
        case green = "green"
        case blue = "blue"
        case darkBlue = "dark blue"
        case cyan = "cyan"
        case yellow = "yellow"
        case magenta = "magenta"
        case orange = "orange"
        case purple = "purple"
        case brown = "brown"
    }
    
    enum TuningStage {
        case stage1, stage2, stage3, stock
    }
    
    //    —Ñ—É–Ω–∫—Ü–∏–∏
    /**
     –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ —á–µ—Ç—ã—Ä–µ—Ö –≤–∞—Ä–∏–∞—Ü–∏—è—Ö
     ~~~
     .fullInfo - –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
     .onlyTechInfo - –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
     .onlyNoTechInfo - –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ, –∏—Å–∫–ª—é—á–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é
     .onlyEngineStatus - –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ—É –æ —Ç–æ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å
     */
    func printCarInfo(mode: CarInfoMod) {
        switch mode {
        case .fullInfo:
            print("-------------------------")
            print("–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è - \(self.make)")
            print("–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è - \(self.model)")
            print("–¶–≤–µ—Ç - \(self.color.rawValue)")
            print("–ü—Ä–æ–±–µ–≥ - \(self.odometer) –∫–º")
            print("–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è - \(self.fuelType.rawValue)")
            print("–ù–∞–ª–∏—á–∏–µ —Ç—É—Ä–±–∏–Ω—ã: \(turbocharger ? "–î–∞": "–ù–µ—Ç")")
            print("–ú–æ—â–Ω–æ—Å—Ç—å - \(self.power) –ª.—Å.")
            print("–ö–ü–ü - \(self.transmission.rawValue)")
            print("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è - \(self.engineStatus.rawValue)")
            print("-------------------------")
        case .onlyEngineStatus:
            print("-------------------------")
            print("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è - \(self.engineStatus.rawValue)")
            print("-------------------------")
        case .onlyTechInfo:
            print("-------------------------")
            print("–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è - \(self.fuelType.rawValue)")
            print("–ù–∞–ª–∏—á–∏–µ —Ç—É—Ä–±–∏–Ω—ã: \(turbocharger ? "–î–∞": "–ù–µ—Ç")")
            print("–ú–æ—â–Ω–æ—Å—Ç—å - \(self.power) –ª.—Å.")
            print("–ö–ü–ü - \(self.transmission.rawValue)")
            print("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è - \(self.engineStatus.rawValue)")
            print("-------------------------")
        case .onlyNoTechInfo:
            print("-------------------------")
            print("–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è - \(self.make)")
            print("–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è - \(self.model)")
            print("–¶–≤–µ—Ç - \(self.color.rawValue)")
            print("–ü—Ä–æ–±–µ–≥ - \(self.odometer) –∫–º")
            print("-------------------------")
        }
    }
    
    /**
     –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç—É–º–±–ª–µ—Ä –∑–∞–∂–∏–≥–∞–Ω–∏—è
     ~~~
     –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∏ –≥–ª—É—à–∏—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å
     ~~~
     - Parameter tumblerPosion: –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç—É–º–±–ª–µ—Ä–∞ –≤–∫–ª/–≤—ã–∫–ª
     */
    mutating func engineTumbler(tumblerPosion: EngineStatus) {
        if tumblerPosion == engineStatus {
            print("–¢—É–º–±–ª–µ—Ä —É–∂–µ –≤ —ç—Ç–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏")
        } else{
            engineStatus = tumblerPosion
        }
    }
    
    /**
     –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á (–∫–ø–ø).
     ~~~
     .manual: –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–ø–ø
     .automat: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ø–ø
     .robot: —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ø–ø
     .variator: –≤–∞—Ä–∏–∞—Ç–æ—Ä
     ~~~
     
     - Parameter transmission: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏.
     */
    mutating func changeTransmissionType(newTransmissionType transmission: Transmission) {
        if self.transmission == transmission {
            print("–î–∞–Ω–Ω—ã–π —Ç–∏–ø –∫–ø–ø —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        } else {
            self.transmission = transmission
        }
    }
    
    /**
     –§—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –º–æ—â–Ω–æ—Å—Ç–∏ —Ç–≤–æ–µ–º—É –∞–≤—Ç–æ
     ~~~
     stage1 - –≥–æ—Ä–æ–¥—Å–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
     stage2 - –ø–æ–ª—É–ø—Ä–æ—Ñ–∏
     stage3 - –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–∞–º—ã—Ö —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã—Ö
     stock - –µ—Å–ª–∏ —Ç–µ–±–µ –≤—Å—ë –Ω–∞–¥–æ–µ–ª–æ –∏ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–∫–∞—Ç–∏—Ç—å –≤–µ—Å—å —Ç—é–Ω–∏–Ω–≥
     ~~~
     - Parameter stage: –≤—ã–±–æ—Ä —Å—Ç—ç–π–¥–∂–∞ —Ç—é–Ω–∏–Ω–≥–∞
     */
    mutating func tuning(stage: TuningStage) {
        switch stage {
        case .stage1:
            switch turbocharger {
            case false:
                turbocharger = true
                print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—É—Ä–±–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞")
            case true:
                print("–ó–∞–º–µ–Ω–∞ —Ç—É—Ä–±–∏–Ω—ã –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—É—é")
            }
            power = stockPower + UInt(Double(stockPower)*0.3)
        case .stage2:
            power = stockPower + UInt(Double(stockPower)*0.5)
        case .stage3:
            power = stockPower + UInt(Double(stockPower)*1.5)
        case .stock:
            power = stockPower
        }
    }
    
    ///–§—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–±–µ–≥ —Ç–≤–æ–µ–≥–æ –∞–≤—Ç–æ, –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–∫—Ä—É—á–∏–≤–∞—Ç—å –ø—Ä–æ–±–µ–≥.
    mutating func odometerNewValue(km: Double) {
        if km > odometer {
            odometer = km
            print("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–±–µ–≥ –Ω–∞ –æ–¥–æ–º–µ—Ç—Ä–µ - \(km) –∫–º")
        } else {
            print("–¢—ã –ø—Ä–∞–≤–¥–∞ –ø—ã—Ç–∞–µ—à—å—Å—è —Å–∫—Ä—É—Ç–∏—Ç—å –ø—Ä–æ–±–µ–≥?")
            sleep(2)
            print("–£–≤—ã, –Ω–æ –º—ã –ø—Ä–æ—Ç–∏–≤ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ–±–µ–≥–æ–≤ =(")
        }
    }
}

var myCar = Car(make: "Toyota", model: "Chaser", color: .darkBlue, power: 450, turbocharger: true, odometer: 125_000, fuelType: .gas, transmission: .automatic)

//myCar.printCarInfo(mode: .onlyEngineStatus)
//myCar.engineTumbler(tumblerPosion: .on)
//myCar.printCarInfo(mode: .onlyEngineStatus)
//myCar.engineTumbler(tumblerPosion: .on)
//myCar.printCarInfo(mode: .onlyEngineStatus)
//myCar.changeTransmissionType(newTransmissionType: .manual)
//myCar.printCarInfo(mode: .onlyTechInfo)
//myCar.changeTransmissionType(newTransmissionType: .manual)
//myCar.printCarInfo(mode: .onlyTechInfo)
//myCar.odometerNewValue(km: 126000.5)
//myCar.odometerNewValue(km: 60000)
//myCar.printCarInfo(mode: .onlyTechInfo)
//myCar.tuning(stage: .stage1)
//myCar.printCarInfo(mode: .onlyTechInfo)
//myCar.tuning(stage: .stage2)
//myCar.printCarInfo(mode: .onlyTechInfo)
//myCar.tuning(stage: .stage3)
//myCar.printCarInfo(mode: .onlyTechInfo)
//myCar.tuning(stage: .stock)
//myCar.printCarInfo(mode: .onlyTechInfo)

///–°–æ–∑–¥–∞–π —Å–≤–æ–π –≥—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å üõª
struct Truck {
    ///–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ
    private let make: String
    ///–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ
    private let model: String
    ///–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å –±–∞–≥–∞–∂–Ω–∏–∫–∞ (–∫–≥)
    private let trunkOverVolume: Double
    ///–î–∞–Ω–Ω—ã–µ –Ω–∞ –æ–¥–æ–º–µ—Ç—Ä–µ (–ø—Ä–æ–±–µ–≥)
    private var odometer: Double
    ///—Ç–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –±–∞–≥–∞–∂–Ω–∏–∫–∞ (–∫–≥)
    private var trunkVolume: Double
    ///–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞ (–æ—Ç–∫—Ä—ã—Ç–æ/–∑–∞–∫—Ä—ã—Ç–æ)
    private var windowsCondition: WindowSwitch
    
    
    init(make: String, model: String, odometer: Double, trunkVolume: Double) {
        self.make = make
        self.model = model
        self.odometer = odometer
        trunkOverVolume = trunkVolume
        self.trunkVolume = 0
        windowsCondition = .close
    }
    
    enum WindowSwitch {
        case open, close
    }
    
    /// –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    func printTruckInfo() {
        print("-------------------------")
        print("–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è - \(make)")
        print("–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è - \(model)")
        print("–ü—Ä–æ–±–µ–≥ - \(odometer) –∫–º")
        print("–ë–∞–≥–∞–∂–Ω–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ \(trunkVolume) –∫–≥. –∏–∑ \(trunkOverVolume) –∫–≥.")
        print("-------------------------")
    }
    
    /**
     –ü–æ–ª–æ–∂–∏—Ç—å –≤ –±–∞–≥–∞–∂–Ω–∏–∫ n - –∫–∏–ª–æ–≥—Ä–∞–º–º
     ~~~
     –§—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–≥–∞–∂–Ω–∏–∫ –Ω—É–∂–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–≥.
     ~~~
     - Parameter kg: –£–∫–∞–∂–∏ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
     */
    mutating func putInTruck (kg: Double) {
        if self.trunkVolume + kg >= 0 && self.trunkVolume + kg <= self.trunkOverVolume {
            self.trunkVolume += kg
        } else {
            print("–í –±–∞–≥–∞–∂–Ω–∏–∫–µ —Ç–≤–æ–µ–≥–æ \(make) \(model) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ \(trunkOverVolume) –∫–≥.,\n–£–ø–∞–∫—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –≤–ª–µ–∑–µ—Ç.")
            trunkVolume = trunkOverVolume
        }
    }
    
    /**
     –ò–∑—ä—è—Ç—å –∏–∑ –±–∞–≥–∞–∂–Ω–∏–∫–∞ n - –∫–∏–ª–æ–≥—Ä–∞–º–º
     ~~~
     –§—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç  –∏–∑—ä—è—Ç—å –∏–∑ –±–∞–≥–∞–∂–Ω–∏–∫–∞ –Ω—É–∂–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–≥.
     ~~~
     - Parameter kg: –£–∫–∞–∂–∏ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
     */
    mutating func removeFromTruck (kg: Double) {
        if self.trunkVolume + kg >= 0 && self.trunkVolume + kg <= self.trunkOverVolume {
            self.trunkVolume -= kg
        } else {
            print("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ –±–∞–≥–∞–∂–Ω–∏–∫–∞ –±–æ–ª—å—à–µ, —á–µ–º —Ç–∞–º —Å–µ–π—á–∞—Å –µ—Å—Ç—å.\n–¢–∞–∫ —á—Ç–æ —è –≤—ã—Ç–∞—â–∏–ª –≤—Å—ë —á—Ç–æ –±—ã–ª–æ.")
            trunkVolume = 0
        }
    }
    
    ///–§—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–±–µ–≥ —Ç–≤–æ–µ–≥–æ –∞–≤—Ç–æ, –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–∫—Ä—É—á–∏–≤–∞—Ç—å –ø—Ä–æ–±–µ–≥.
    mutating func odometerNewValue(km: Double) {
        if km > odometer {
            odometer = km
            print("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–±–µ–≥ –Ω–∞ –æ–¥–æ–º–µ—Ç—Ä–µ - \(km) –∫–º")
        } else {
            print("–£–≤—ã, –Ω–æ –º—ã –ø—Ä–æ—Ç–∏–≤ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ–±–µ–≥–æ–≤ =(")
        }
    }
    
    ///–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–æ–Ω –≤ –∞–≤—Ç–æ
    mutating func switchWindowMode (_ mode: WindowSwitch) {
        switch mode {
        case .open:
            if windowsCondition == .open {
                print("–û–∫–Ω–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã\n")
            } else {
                windowsCondition = .open
                print("–û–∫–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã\n")
            }
        case .close:
            if windowsCondition == .close {
                print("–û–∫–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã\n")
            } else {
                windowsCondition = .close
                print("–û–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã\n")
            }
        }
    }
}

var myTtuck = Truck(make: "Ford", model: "F-150", odometer: 360000, trunkVolume: 600)
myTtuck.putInTruck(kg: 690)
myTtuck.printTruckInfo()
myTtuck.removeFromTruck(kg: 610)
myTtuck.printTruckInfo()
myTtuck.switchWindowMode(.open)
myTtuck.switchWindowMode(.open)
